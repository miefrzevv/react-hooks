/*
Lazy Loading (ленивая загрузка) в React — это техника, позволяющая откладывать загрузку компонентов или других ресурсов (например, изображений, модулей) до момента, когда они действительно понадобятся. В React 18 ленивую загрузку стало проще использовать благодаря встроенным улучшениям, связанным с серверным рендерингом и Concurrent Mode.

Зачем нужен Lazy Loading?
Улучшение производительности:
Только необходимый код загружается при первом рендере приложения. Это уменьшает размер бандла.

Оптимизация времени загрузки:
Менее важные компоненты загружаются позже, уменьшая время до первого отображения содержимого (Time to Interactive).

Поддержка асинхронных операций:
React позволяет загружать компоненты только по запросу, благодаря встроенному механизму React.lazy().
*/

/*
Основные функции и возможности Lazy Loading в React
1. React.lazy
React.lazy() позволяет динамически импортировать компоненты. Это означает, что компонент загружается только тогда, когда он становится необходим для рендеринга.
*/

import React, { Suspense } from 'react';

const LazyComponent = React.lazy(() => import('./LazyComponent'));

function App() {
  return (
    <div>
      <Suspense fallback={<div>Loading...</div>}>
        <LazyComponent />
      </Suspense>
    </div>
  );
}

export default App;
/*
Как работает:
React.lazy(() => import('./LazyComponent')) загружает компонент асинхронно.
Компонент рендерится только внутри Suspense, который показывает запасной UI (fallback) до завершения загрузки.
*/

/*
2. Поддержка SSR (Server-Side Rendering)
В React 18 улучшена работа с ленивой загрузкой при серверном рендеринге. Благодаря новым механизмам, сервер может ожидать загрузку ленивых компонентов и отправлять клиенту готовый HTML.
*/

/*
3. Комбинация с Code Splitting
React Lazy Loading отлично работает вместе с Code Splitting. Например, с использованием Webpack вы можете разбивать приложение на отдельные чанки, которые загружаются при необходимости.
*/
const About = React.lazy(() => import('./About'));
const Contact = React.lazy(() => import('./Contact'));
// Здесь About и Contact будут загружены в отдельных чанках, а не включены в основной бандл.


/*
4. Поддержка вложенного рендеринга
Можно использовать ленивую загрузку для компонентов, которые рендерятся в зависимости от маршрута:
*/
import React, { Suspense } from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';

const Home = React.lazy(() => import('./Home'));
const About = React.lazy(() => import('./About'));

function App() {
  return (
    <BrowserRouter>
      <Suspense fallback={<div>Loading...</div>}>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/about" element={<About />} />
        </Routes>
      </Suspense>
    </BrowserRouter>
  );
}

export default App;

/*
Советы по использованию
Группируйте файлы по функциональности:
Загружайте только то, что действительно нужно для текущего экрана.

Избегайте избыточного разбиения:
Слишком большое количество лениво загружаемых файлов может привести к проблемам с производительностью, связанным с сетью (множество запросов).

Добавьте качественный fallback:
Всегда предоставляйте хороший пользовательский опыт во время загрузки компонентов.

Не лениво загружайте критически важные компоненты:
Например, главную навигацию или другие элементы, которые нужны сразу.
*/