/*
useDeferredValue — это хук, добавленный в React 18, который позволяет откладывать обновление значения для оптимизации производительности. Он особенно полезен в случаях, когда нужно отреагировать на изменения с высокой приоритетностью (например, обновление пользовательского интерфейса), но при этом отложить вычислительно сложные или менее приоритетные задачи.
*/

/*
Основные характеристики useDeferredValue
Задержка обновлений:
Значение, передаваемое в useDeferredValue, обновляется "асинхронно", то есть с низким приоритетом, если приложение в данный момент занято более важными задачами.

Не блокирует UI:
Интерфейс остается отзывчивым, даже если происходят тяжелые вычисления или рендеринг сложных компонентов.

Простой API:
Вы передаете текущее значение в useDeferredValue, а React возвращает "отложенное" значение, которое обновляется только тогда, когда система "свободна".
*/

/*
Основные характеристики useDeferredValue
Задержка обновлений:
Значение, передаваемое в useDeferredValue, обновляется "асинхронно", то есть с низким приоритетом, если приложение в данный момент занято более важными задачами.

Не блокирует UI:
Интерфейс остается отзывчивым, даже если происходят тяжелые вычисления или рендеринг сложных компонентов.

Простой API:
Вы передаете текущее значение в useDeferredValue, а React возвращает "отложенное" значение, которое обновляется только тогда, когда система "свободна".
*/

const deferredValue = useDeferredValue(value);

/*
value — текущее значение, которое может обновляться с высокой частотой (например, ввод текста).
deferredValue — отложенная версия этого значения, обновляется с более низким приоритетом.
*/

/*
Пример использования
Рассмотрим компонент, в котором пользователь вводит текст для фильтрации большого списка:
*/

import React, { useState, useDeferredValue } from 'react';

function App() {
  const [query, setQuery] = useState('');
  const deferredQuery = useDeferredValue(query);

  const data = [
    'Apple', 'Banana', 'Cherry', 'Date', 'Fig', 'Grape', 'Honeydew',
    // Представьте, что здесь тысячи элементов
  ];

  const filteredData = data.filter(item =>
    item.toLowerCase().includes(deferredQuery.toLowerCase())
  );

  return (
    <div>
      <input
        type="text"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Type to search..."
      />
      <ul>
        {filteredData.map((item, index) => (
          <li key={index}>{item}</li>
        ))}
      </ul>
    </div>
  );
}

export default App;
